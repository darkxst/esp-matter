ARG VERSION=latest
FROM connectedhomeip/chip-build:${VERSION} as build

RUN set -x \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -fy --no-install-recommends \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/ \
    && : # last line

# To build the image for a branch or a tag of IDF, pass --build-arg IDF_CLONE_BRANCH_OR_TAG=name.
# To build the image with a specific commit ID of IDF, pass --build-arg IDF_CHECKOUT_REF=commit-id.
# It is possibe to combine both, e.g.:
#   IDF_CLONE_BRANCH_OR_TAG=release/vX.Y
#   IDF_CHECKOUT_REF=<some commit on release/vX.Y branch>.
# Use IDF_CLONE_SHALLOW=1 to peform shallow clone (i.e. --depth=1 --shallow-submodules)

ARG IDF_CLONE_URL=https://github.com/espressif/esp-idf.git
ARG IDF_CLONE_BRANCH_OR_TAG=v4.4.3
ARG IDF_CHECKOUT_REF=
ARG IDF_CLONE_SHALLOW=

RUN set -x \
    && git clone --recursive \
      ${IDF_CLONE_SHALLOW:+--depth=1 --shallow-submodules} \
      ${IDF_CLONE_BRANCH_OR_TAG:+-b $IDF_CLONE_BRANCH_OR_TAG} \
      $IDF_CLONE_URL /tmp/esp-idf \
    && if [ -n "$IDF_CHECKOUT_REF" ]; then \
      cd /tmp/esp-idf \
      && if [ -n "$IDF_CLONE_SHALLOW" ]; then \
        git fetch origin --depth=1 --recurse-submodules ${IDF_CHECKOUT_REF}; \
      fi \
      && git checkout $IDF_CHECKOUT_REF \
      && git submodule update --init --recursive; \
    fi \
    && : # last line

FROM connectedhomeip/chip-build:${VERSION}

ENV IDF_PATH=/opt/espressif/esp-idf/
ENV IDF_TOOLS_PATH=/opt/espressif/tools

COPY --from=build /tmp/esp-idf /opt/espressif/esp-idf

# Setup the ESP-IDF
WORKDIR /opt/espressif/esp-idf
RUN set -x \
    && ./install.sh \
    && : # last line

# To build the image for a branch or a tag of ESP-MATTER, pass --build-arg ESP_MATTER_CLONE_BRANCH_OR_TAG=name.
# To build the image with a specific commit ID of ESP-MATTER, pass --build-arg ESP_MATTER_CHECKOUT_REF=commit-id.
# It is possible to combine both, e.g.:
#   ESP_MATTER_CLONE_BRANCH_OR_TAG=release/vX.Y
#   ESP_MATTER_CHECKOUT_REF=<some commit on release/vX.Y branch>.
# Use ESP_MATTER_CLONE_SHALLOW=1 to perform shallow clone (i.e. --depth=1 --shallow-submodules)

ARG ESP_MATTER_CLONE_URL=https://github.com/espressif/esp-matter.git
ARG ESP_MATTER_CLONE_BRANCH_OR_TAG=main
ARG ESP_MATTER_CHECKOUT_REF=
ARG ESP_MATTER_CLONE_SHALLOW=

WORKDIR /opt/espressif
ENV ESP_MATTER_PATH=/opt/espressif/esp-matter

RUN set -x \
    && if [ -n "$ESP_MATTER_CLONE_SHALLOW" ]; then \
      git clone --depth 1 \
        ${ESP_MATTER_CLONE_BRANCH_OR_TAG:+-b $ESP_MATTER_CLONE_BRANCH_OR_TAG} \
        $ESP_MATTER_CLONE_URL $ESP_MATTER_PATH; \
    else \
      git clone --recursive \
        ${ESP_MATTER_CLONE_BRANCH_OR_TAG:+-b $ESP_MATTER_CLONE_BRANCH_OR_TAG} \
        $ESP_MATTER_CLONE_URL $ESP_MATTER_PATH; \
    fi \
    && cd $ESP_MATTER_PATH \
    && if [ -n "$ESP_MATTER_CHECKOUT_REF" ]; then \
      git checkout $ESP_MATTER_CHECKOUT_REF \
      && if [ -n "$ESP_MATTER_CLONE_SHALLOW" ]; then \
        git fetch origin --depth 1 --recurse-submodules ${ESP_MATTER_CHECKOUT_REF}; \
      fi; \
    fi \
    && if [ -n "$ESP_MATTER_CLONE_SHALLOW" ]; then \
      git submodule update --init --depth 1 \
      && cd ./connectedhomeip/connectedhomeip \
      && ./scripts/checkout_submodules.py --platform esp32 linux --shallow \
      && cd ../..; \
    fi \
    && . $IDF_PATH/export.sh \
    && ./install.sh \
    && : # last line

COPY entrypoint.sh /opt/esp/entrypoint.sh
ENTRYPOINT [ "/opt/esp/entrypoint.sh" ]
CMD [ "/bin/bash" ]

WORKDIR /opt/espressif/esp-matter
